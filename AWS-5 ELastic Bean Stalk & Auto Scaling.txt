Elastic Bean Stalk - PAAS 

. Simplest way to deploy and scale your web applications in AWS

-> Provides end-to-end web app managment
-> Supports Docker applications, Java, Python etc..

. Features:
  -> Automatic Load Balancing
  -> Auto Scaling
  -> Managed platform updates
  -> Applications health monitoring


AWS ELastic Bean Stalk Concepts

. Application - A container for environments, versions and configuration

. Application Version - A specific version of deployable code ( stored in S3)

. Environment - An application version deployed to AWS resources. You have
                multiple environments running different application versions for
                same application

--------------------------------------------------------------------


Auto Scaling Components

. Launch Configuration/Template ( What?)
 -> EC2 instance size and AMI

. Auto Scaling Group ( Where?)
 -> Min, max and desired size of ASG
 -> Health checks

. Auto Scaling Policies ( When?)
 -> When and How to execute scaling?

Dynamic Scaling Policy types

Scaling Policy      Example                             Description

. Target tracking   Maintain CPU Utilization at         Modify current capacity based on a target value
  scaling           70%                                 for a specific metric.

. Simple scaling    +5 if CPU Utilization > 80%         Waits for cooldown period before triggering
                    -3 if CPU utilization < 60%         additional actions.

. Step scaling      +1 if CPU utilization between       Warm up time can be configured for each instance
                    70% and 80%
                    
                    +3 if CPU utilization between
                    80% and 100%
                    Similar settigs for scale down


Scaling Policies - Monitoring by - Cloud Watch Alarm ---> Auto Scaling ---> EC2 Instances

Two parts:
-> CloudWatch alaram (Is CPU utilization> 80% or 60%)
-> Scaling action (+5 EC2 instances or -3 EC2 instances)

---------------------------------------------------------------------------------

Serverless

AWS Lambda    Lambda Fn   API Gateway

The things we develop an application

 . Where do we deploy the application

 . What kind of server ? What OS ?

 . How do we take care of scaling the application ?

 . How do we ensure that is always available

-> No worrying on servers and focus on building on application

Enter: Serverless

Serverless :
-> You don't worry about infra
-> Flexible scaling
-> Automated high availability 
-> Pay for use:
   . You don't have to provision servers or capacity

-> You focus on code and cloud managed servic takes care of all that 
   needed to scale your code to serve millions of requests 

-----------------------------------------------------------------------------

AWS Lambda

. World before Lambda - ELB with EC2 serers
. You don't worry about servers or scaling or availability
. You only worry about your code
. You pay for what you use
  -> No of requests
  -> Duration of requests
  -> Memory Consumed

AWS Lambda supports programming languages

AWS Lambda Event Sources

. Amazon API Gateway
. AWS Cognito
. Amazon DynamoDB (event)
. Amazon CloudFront (Lambda@Edge)
. AWS Step Functions
. Amazon Kinesis (event)
. Amazon Simple Queue Service (event)
. Amazon Simple Notification Service
.etc

AWS LAMBDA

LAMBDA - DevOps

. Cost optimizations

. Govern the aws resources

. Trigger lambda for s3+cloudwatch = which are event driven actions
  Tell the cloudwatch event or API event on cloudwatch or s3 event triggering to trigger the lambda

Ec2 / Lambda 

Lambda - One thing is compute

         2nd thing is serverless architecutre

.It has two main characterstics to compute family and follow the serverless architecture

.Managing - In Lambda the configurations are directly provided by aws
 

LAMBDA - serverless architecture
 
When an user sends the request only then AWS CREATES infra  for runnig  the applications

and  once the usage of the application is completed aws tears down the

infra which is created .

In ec2 all this process should be done manually (tearing down)

Complete owner of the server in ec2 - server architecture

. Ipaddress

. Subnet range

. Autoscaling enabled or not


->Lambda all the controls are not given aws handles them - serverless architecture

Serverless - . Cost optimization

             . Security/Compliance
          
             . perform regular activities
---------------------------------------------------------------------

Cost Optimization:

Stale resources ---> Notifications

                ---> Delete 

Lambda function -> Python -> communicate with --> AWS API

------------------------------------------------------------------------


Other Computer Services

.Amazon Lightsail
 -> Use case 1: Pre-configured development stacks like LAMP, NGinx,MEAN, and Node.js
 -> Use case 2: Run websited on WordPress, Magento, Plesk, and Joomla
 -> Low, predictable monthly price.

.AWS Batch
 -> Use Case: Run batch computing workloads on AWS
 -> Use Amazon EC2 and Amazon EC2 spot instances

-------------------------------------------------------------------------

Making Your Development Simpler with AWS
 
service: AWS Cloud9 - Developer wanting an IDE that ca be acceses from any location using a web browser
         
         AWS CloudShell - Quick access to AWS services via a command line without any setup on their local machine
          
         AWS Amplify - A startup aiming to quickly build and deploy a responsive web and mobile application with authentication
                        and API capabilities

        AWS CodeCatalyst  - looking to quickly get started with an application on AWS spark afaster planning, development and delivery lifecycle on AWS
        ex: CI/CD

        AWS CodeArtifact - a software developmen team looking for a centraized repository to store and manage reusable code artofacts and dependcies
------------------------------------------------------------------------------------------------
------------------------------------------------------------------


Elastic BeanStalk - Platform as service

Pre configured platforms - aws provides us

Just code upload is enough i the environment


Two types environment tiers

Worker 

webserver














